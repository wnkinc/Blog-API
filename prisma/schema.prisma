// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
  // or possibly "linux-arm64-openssl-1.0.x", depending on your environment
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  sub        String    @unique // Unique Cognito ID (sub)
  email      String    @unique // User's email
  username   String    @unique // User's username
  profilePic String? // Optional URL for profile picture
  bio        String? // Optional user bio
  posts      Post[] // Relation to posts
  comments   Comment[] // Relation to comments
  createdAt  DateTime  @default(now()) // Timestamp for when the user was created
  updatedAt  DateTime  @updatedAt // Timestamp for when the user was last updated
}

model Post {
  id         Int        @id @default(autoincrement())
  title      String
  slug       String     @unique // SEO-friendly URL
  content    String // Rich text content with HTML
  coverImage String? // URL of the cover image (nullable)
  published  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  authorId   Int
  author     User       @relation(fields: [authorId], references: [id])
  comments   Comment[]
  reactions  Reaction[]
}

model Reaction {
  id        Int      @id @default(autoincrement())
  type      String // Type of reaction (‚ù§Ô∏è, ü¶Ñ, üòÇ, ü§Ø, üëé)
  count     Int      @default(0) // Total number of times this reaction was used
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([postId, type]) // Ensures one row per reaction type per post
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String
  createdAt DateTime  @default(now())
  postId    Int
  post      Post      @relation(fields: [postId], references: [id])
  userId    Int?
  user      User?     @relation(fields: [userId], references: [id])
  parentId  Int? // For replies
  parent    Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
}
